{
    "id": "beba6b1c-a834-f8a3-951c-29678666d198",
    "name": "Cisco Spark Admin API - PUBLIC",
    "description": "Spark for Developers includes administration APIs that allow administrators to programatically perform administration actions such as provisioning a user. By automating administration, user management and provisioning can be centralized in an existing tool, rather than using the Spark Administration interface. For example, a partner selling multiple Collaboration tools to customers can use these APIs to enable Spark provisioning through a centralized portal.\n\nhttps://developer.ciscospark.com/admin-api.html\n\n\n## What's possible with Admin APIs?\n\nCurrently, administration is focused on User Provisioning. Using these APIs, an admin can:\n\n- Create a user\n- Update a user\n- View license usage of an organization\n- View available roles of an organization\n\n\n## Authentication\n\nUse of these APIs requires you to be an administrator of an organization.\n\nIf you are an administrator, you can login here to get a development auth token with necessary scopes.\n\nCreating an Integration that will act on behalf of an administrator can be done by including one or more of the following scopes when requesting an auth token via oAuth.\n\n- spark-admin:people_read  Access to read your user's company directory\n- spark-admin:people_write  Access to write to your user's company directory\n- spark-admin:organizations_read  Access to write to your user's company directory\n- spark-admin:roles_read  Access to read roles available in your user's organization\n- spark-admin:licenses_read  Access to read licenses available in your user's organizations\n",
    "order": [],
    "folders": [
        {
            "id": "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc",
            "name": "Events",
            "description": "Events are generated when actions take place within Cisco Spark, such as when someone creates or deletes a message. Use the Events API to retrieve events related to your account. Compliance Officers may retrieve events for all users within an organization. See the Compliance Guide for more information.\nhttps://developer.ciscospark.com/docs/api/guides/compliance.html\n\nThe resource endpoints such as /rooms, /messages, /memberships, etc. represent the current state of data in Spark. The /events resource represents the log of state changes which led to the current state of these resources; it details when a resource changed and who made the change.\n\nFor example, when a user posts a message in a room, this will result in a new message, available via the /messages resource. It will also result in a new event, available on the /events resource. If the user then deletes their message, this will result in the message no longer being returned on the /messages resource but it will result in a new event for the message deletion on the /events resource.\n\nEvents are available for the following resources when they are created, updated, or deleted:\n- messages\n- memberships\n\nhttps://developer.ciscospark.com/resource-events.html",
            "order": [
                "8b6f952c-df94-6890-1f72-eb5304320d32",
                "ef2d5da0-9e68-3cce-ea37-10758a6b315f",
                "90be273b-e03d-703e-4194-fdc14edb7cde",
                "6af0771f-accd-cd4c-d6f0-5ff5dece1623",
                "815bc924-be24-c73a-7acf-c189c56dffb1"
            ],
            "owner": "30210",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198"
        },
        {
            "id": "81f485d5-ab62-a897-f96c-0b62588dc778",
            "name": "Licenses",
            "description": "An allowance for features and services that are provided to users on a Cisco Spark services subscription. Cisco and its partners manage the amount of licenses provided to administrators and users. This license resource can be accessed only by an admin.\n\nhttps://developer.ciscospark.com/resource-licenses.html",
            "order": [
                "804e8715-36b4-e52b-8f14-23312f1c9dd9",
                "45e619a6-84b8-0a3d-d8bc-9542dbaee068"
            ],
            "folders_order": null,
            "owner": "30210",
            "lastUpdatedBy": "30210",
            "lastRevision": 738587022,
            "folder": null
        },
        {
            "id": "83590afe-95a9-68e6-de56-53c730353399",
            "name": "Organizations",
            "description": "A set of people in Cisco Spark. Organizations may manage other organizations or be managed themselves. This organizations resource can be accessed only by an admin.\n\nhttps://developer.ciscospark.com/resource-organizations.html\n\n",
            "order": [
                "8a44d5a8-ee10-eab7-2655-7c80cea68a7b",
                "d8027acf-e393-f5d4-c6c6-65b6efcc1628"
            ],
            "folders_order": null,
            "owner": "30210",
            "lastUpdatedBy": "30210",
            "lastRevision": 738593577,
            "folder": null
        },
        {
            "id": "35701845-4082-6e65-c017-3d53910f68a7",
            "name": "People",
            "description": "People are registered users of the Spark application.",
            "order": [
                "549fa1ab-875e-cfd6-e108-609cdeba32ab",
                "c3d6ff1e-be4c-e29e-6630-658f9a25baef",
                "0a7a590b-68e2-0afa-f91c-722e3fc8408b",
                "b16b78de-df0a-5d5b-5b56-387984581282",
                "50551fd2-659d-8c5d-15f4-79a25cc2692c",
                "cefbbd82-629d-18e7-2bcf-d2c7b463ee3f",
                "ff88a8ea-7772-e534-952c-9488ec0e31a3",
                "646ed833-d121-aaea-c278-f8af65799156"
            ],
            "folders_order": null,
            "owner": "30210",
            "lastUpdatedBy": "30210",
            "lastRevision": 738759956,
            "folder": null,
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198"
        },
        {
            "id": "db8d7818-9aad-8d6b-c07f-67fb81738b0c",
            "name": "Roles",
            "description": "A persona for an authenticated user, corresponding to a set of privileges within an organization. This roles resource can be accessed only by an admin.\n\nhttps://developer.ciscospark.com/resource-roles.html",
            "order": [
                "3efc3ed5-cecf-dec0-4374-37de19d8a306",
                "4d6def22-cb7b-e7ed-c876-9efc94d11e7b"
            ],
            "folders_order": null,
            "owner": "30210",
            "lastUpdatedBy": "30210",
            "lastRevision": 738691437,
            "folder": null
        }
    ],
    "folders_order": [
        "35701845-4082-6e65-c017-3d53910f68a7",
        "83590afe-95a9-68e6-de56-53c730353399",
        "81f485d5-ab62-a897-f96c-0b62588dc778",
        "db8d7818-9aad-8d6b-c07f-67fb81738b0c",
        "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc"
    ],
    "timestamp": 0,
    "owner": "30210",
    "public": false,
    "events": [],
    "variables": [],
    "auth": null,
    "requests": [
        {
            "id": "0a7a590b-68e2-0afa-f91c-722e3fc8408b",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people/{{_person}}",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "time": 1500539860542,
            "name": "Get Person Details",
            "description": "Shows details for a person, by ID.\nSpecify the person ID in the personId parameter in the URI.\n\nhttps://developer.ciscospark.com/endpoint-people-personId-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get person details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get person details: success\"] = true;",
                            "}",
                            "",
                            "",
                            "    "
                        ]
                    }
                }
            ],
            "isFromCollection": true,
            "collectionRequestId": "ff88a8ea-7772-e534-952c-9488ec0e31a3",
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get person details: failed\"] = false;\n}\nelse {\n    tests[\"Get person details: success\"] = true;\n}\n\n\n    ",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\n  \"emails\": [\n    \"steve.sfartz@gmail.com\"\n  ],\n  \"displayName\": \"Steve Sfartz\",\n  \"firstName\": \"Steve\",\n  \"lastName\": \"Sfartz\",\n  \"orgId\": \"Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi82NWQ0N2MzNS1lNzg1LTRjZTMtOWM0NC1hNGM0OGViZTQyYmE\"\n  \n}"
        },
        {
            "folder": "db8d7818-9aad-8d6b-c07f-67fb81738b0c",
            "id": "3efc3ed5-cecf-dec0-4374-37de19d8a306",
            "name": "List Roles",
            "dataMode": "params",
            "data": null,
            "rawModeData": null,
            "descriptionFormat": "html",
            "description": "List all roles.\n\nhttps://developer.ciscospark.com/endpoint-roles-get.html\n\nExample Response:\n``` json\n{\n  'items' : [ {\n    'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n    'displayName' : 'Full Administrator'\n  } ]\n}\n```\n",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "method": "GET",
            "pathVariables": [],
            "url": "https://api.ciscospark.com/v1/roles",
            "queryParams": null,
            "headerData": null,
            "pathVariableData": null,
            "responses": [],
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List roles: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List roles: success\"] = true;",
                            "    ",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.items === undefined) {",
                            "        tests[\"List roles: cannot retreive result\"] = false",
                            "    }",
                            "    else {",
                            "        var roleId = jsonData.items[0].id;",
                            "        postman.setEnvironmentVariable(\"_role\", roleId);",
                            "        tests[\"List roles: retreived with id:\" + roleId] = true",
                            "    }",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List roles: failed\"] = false;\n}\nelse {\n    tests[\"List roles: success\"] = true;\n    \n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.items === undefined) {\n        tests[\"List roles: cannot retreive result\"] = false\n    }\n    else {\n        var roleId = jsonData.items[0].id;\n        postman.setEnvironmentVariable(\"_role\", roleId);\n        tests[\"List roles: retreived with id:\" + roleId] = true\n    }\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "45e619a6-84b8-0a3d-d8bc-9542dbaee068",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/licenses/{{_license}}",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "time": 1500540441041,
            "name": "Get License Details",
            "description": "Shows details for a license, by ID.\r\n\r\nSpecify the license ID in the licenseId parameter in the URI.\r\n\r\nhttps://developer.ciscospark.com/endpoint-licenses-licenseId-get.html\r\n\r\nExample Response:\r\n``` json\r\n{\r\n  'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\r\n  'displayName' : 'Spark Calling',\r\n  'totalUnits' : '42',\r\n  'consumedUnits' : \"8'\r\n}\r\n```",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "81f485d5-ab62-a897-f96c-0b62588dc778",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get license details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get license details: success\"] = true;",
                            "}",
                            ""
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get license details: failed\"] = false;\n}\nelse {\n    tests[\"Get license details: success\"] = true;\n}\n",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\n    \"name\": \"European Football Championship 2016\"\n}"
        },
        {
            "folder": "db8d7818-9aad-8d6b-c07f-67fb81738b0c",
            "id": "4d6def22-cb7b-e7ed-c876-9efc94d11e7b",
            "name": "Get Role Details",
            "dataMode": "params",
            "data": null,
            "rawModeData": null,
            "descriptionFormat": "html",
            "description": "Shows details for a role, by ID.\n\nSpecify the role ID in the roleId parameter in the URI.\n\nhttps://developer.ciscospark.com/endpoint-roles-roleId-get.html\n\nExample Response:\n``` json\n{\n  'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n  'displayName' : 'Full Administrator'\n}\n```\n",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "method": "GET",
            "pathVariables": [],
            "url": "https://api.ciscospark.com/v1/roles/{{_role}}",
            "queryParams": null,
            "headerData": null,
            "pathVariableData": null,
            "responses": [],
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get role details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get role details: success\"] = true;",
                            "}",
                            "    "
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get role details: failed\"] = false;\n}\nelse {\n    tests[\"Get role details: success\"] = true;\n}\n    ",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "id": "50551fd2-659d-8c5d-15f4-79a25cc2692c",
            "name": "Get roles (to fetch a role id)",
            "dataMode": "params",
            "data": null,
            "rawModeData": null,
            "descriptionFormat": null,
            "description": "List all roles.\n\nhttps://developer.ciscospark.com/endpoint-roles-get.html\n\nExample Response:\n``` json\n{\n  'items' : [ {\n    'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n    'displayName' : 'Full Administrator'\n  } ]\n}\n```\n",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "method": "GET",
            "pathVariables": [],
            "url": "https://api.ciscospark.com/v1/roles",
            "queryParams": null,
            "headerData": null,
            "pathVariableData": null,
            "responses": [],
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List roles: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List roles: success\"] = true;",
                            "    ",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.items === undefined) {",
                            "        tests[\"List roles: cannot retreive result\"] = false",
                            "    }",
                            "    else {",
                            "        var roleId = jsonData.items[0].id;",
                            "        postman.setEnvironmentVariable(\"_role\", roleId);",
                            "        tests[\"List roles: retreived with id:\" + roleId] = true",
                            "    }",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List roles: failed\"] = false;\n}\nelse {\n    tests[\"List roles: success\"] = true;\n    \n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.items === undefined) {\n        tests[\"List roles: cannot retreive result\"] = false\n    }\n    else {\n        var roleId = jsonData.items[0].id;\n        postman.setEnvironmentVariable(\"_role\", roleId);\n        tests[\"List roles: retreived with id:\" + roleId] = true\n    }\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "549fa1ab-875e-cfd6-e108-609cdeba32ab",
            "headers": "Authorization: Bearer {{spark_token}}\nContent-Type: application/json\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people/me",
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "queryParams": [],
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "id": "74bc245f-0686-4669-ac38-4bad3a1dc927",
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get person details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get person details: success\"] = true;",
                            "    ",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.id === undefined) {",
                            "        tests[\"Create a person: cannot retreive result\"] = false",
                            "    }",
                            "    else {",
                            "        var email = jsonData.emails[0];",
                            "        var parsed = email.match(/\\@(.*)$/);",
                            "        var domain = parsed[1];",
                            "        postman.setEnvironmentVariable(\"_domain\", domain);",
                            "        tests[\"Create a person: retreived domain: \" + domain] = true",
                            "    }",
                            "}",
                            "",
                            "",
                            "    "
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "263d0744-ec80-4b24-a3ad-2e2bc62bca25",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "auth": null,
            "time": 1513929806120,
            "name": "Get Person Details (me)",
            "description": "Show the profile for the authenticated user.\n\nhttps://developer.ciscospark.com/endpoint-people-me-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get person details: failed\"] = false;\n}\nelse {\n    tests[\"Get person details: success\"] = true;\n    \n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.id === undefined) {\n        tests[\"Create a person: cannot retreive result\"] = false\n    }\n    else {\n        var email = jsonData.emails[0];\n        var parsed = email.match(/\\@(.*)$/);\n        var domain = parsed[1];\n        postman.setEnvironmentVariable(\"_domain\", domain);\n        tests[\"Create a person: retreived domain: \" + domain] = true\n    }\n}\n\n\n    ",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\n  \"emails\": [\n    \"steve.sfartz@gmail.com\"\n  ],\n  \"displayName\": \"Steve Sfartz\",\n  \"firstName\": \"Steve\",\n  \"lastName\": \"Sfartz\",\n  \"orgId\": \"Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi82NWQ0N2MzNS1lNzg1LTRjZTMtOWM0NC1hNGM0OGViZTQyYmE\"\n  \n}"
        },
        {
            "id": "646ed833-d121-aaea-c278-f8af65799156",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people/{{_person}}",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "DELETE",
            "data": [],
            "dataMode": "raw",
            "time": 1500540498903,
            "name": "Delete a Person",
            "description": "Remove a person from the system. Only an admin can remove a person.\n\nSpecify the person ID in the personId parameter in the URI.\n\nhttps://developer.ciscospark.com/endpoint-people-personId-delete.html\n\n",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 204) {",
                            "    tests[\"Delete person: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Delete person: success\"] = true;",
                            "}",
                            "    ",
                            "    "
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 204) {\n    tests[\"Delete person: failed\"] = false;\n}\nelse {\n    tests[\"Delete person: success\"] = true;\n}\n    \n    ",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "\r\n\r\n  "
        },
        {
            "folder": "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc",
            "id": "6af0771f-accd-cd4c-d6f0-5ff5dece1623",
            "name": "List Events (new messages last hour)",
            "dataMode": "params",
            "data": null,
            "auth": null,
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "var now = new Date(Date.now());",
                            "postman.setEnvironmentVariable(\"_now\", now.toISOString());",
                            "",
                            "var one_hour_ago = now;",
                            "one_hour_ago.setHours(one_hour_ago.getHours()-1);",
                            "postman.setEnvironmentVariable(\"_one_hour_ago\", one_hour_ago.toISOString());",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List events (new messages last hour): failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List events (new messages last hour): success\"] = true;",
                            "",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.items.length === 0) {",
                            "        tests[\"List events (new messages last hour): no new messages\"] = true",
                            "    }",
                            "    else {",
                            "        var pickedEvent = jsonData.items[0];",
                            "        postman.setEnvironmentVariable(\"_event\", pickedEvent.id);",
                            "        tests[\"List events (new messages last hour): stored event:\" + pickedEvent.id] = true",
                            "    }",
                            "}"
                        ]
                    }
                }
            ],
            "rawModeData": null,
            "descriptionFormat": null,
            "description": "List events in your organization. Several query parameters are available to filter the response.\nLong result sets will be split into pages.\n\nhttps://developer.ciscospark.com/endpoint-events-get.html",
            "variables": null,
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "method": "GET",
            "pathVariables": [],
            "url": "https://api.ciscospark.com/v1/events?resource=messages&type=created&from={{_one_hour_ago}}&to={{_now}}",
            "queryParams": [
                {
                    "key": "resource",
                    "value": "messages",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "type",
                    "value": "created",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "from",
                    "value": "{{_one_hour_ago}}",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "to",
                    "value": "{{_now}}",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "pathVariableData": [],
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "preRequestScript": "var now = new Date(Date.now());\npostman.setEnvironmentVariable(\"_now\", now.toISOString());\n\nvar one_hour_ago = now;\none_hour_ago.setHours(one_hour_ago.getHours()-1);\npostman.setEnvironmentVariable(\"_one_hour_ago\", one_hour_ago.toISOString());\n\n\n\n\n\n",
            "tests": "if (responseCode.code != 200) {\n    tests[\"List events (new messages last hour): failed\"] = false;\n}\nelse {\n    tests[\"List events (new messages last hour): success\"] = true;\n\n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.items.length === 0) {\n        tests[\"List events (new messages last hour): no new messages\"] = true\n    }\n    else {\n        var pickedEvent = jsonData.items[0];\n        postman.setEnvironmentVariable(\"_event\", pickedEvent.id);\n        tests[\"List events (new messages last hour): stored event:\" + pickedEvent.id] = true\n    }\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "804e8715-36b4-e52b-8f14-23312f1c9dd9",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/licenses",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "time": 1500540052039,
            "name": "List Licenses",
            "description": "List all licenses for a given organization. If no orgId is specified, the default is the organization of the authenticated user.\n\nhttps://developer.ciscospark.com/endpoint-licenses-get.html\n\nExample of a response:\n``` json\n{\n  'items' : [ {\n    'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n    'displayName' : 'Spark Calling',\n    'totalUnits' : '42',\n    'consumedUnits' : '8'\n  } ]\n}\n```",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "81f485d5-ab62-a897-f96c-0b62588dc778",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List licenses : failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List licenses: success\"] = true;",
                            "    ",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.items === undefined) {",
                            "        tests[\"List licenses: cannot retreive result\"] = false",
                            "    }",
                            "    else {",
                            "        var licenseId = jsonData.items[0].id;",
                            "        postman.setEnvironmentVariable(\"_license\", licenseId);",
                            "        tests[\"List licenses: retreived one with id:\" + licenseId] = true",
                            "    }",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List licenses : failed\"] = false;\n}\nelse {\n    tests[\"List licenses: success\"] = true;\n    \n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.items === undefined) {\n        tests[\"List licenses: cannot retreive result\"] = false\n    }\n    else {\n        var licenseId = jsonData.items[0].id;\n        postman.setEnvironmentVariable(\"_license\", licenseId);\n        tests[\"List licenses: retreived one with id:\" + licenseId] = true\n    }\n}",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\n    \"name\": \"European Football Championship 2016\"\n}"
        },
        {
            "id": "815bc924-be24-c73a-7acf-c189c56dffb1",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/events/{{_event}}",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": null,
            "dataMode": "params",
            "time": 1500538458448,
            "name": "Get Events Details",
            "description": "Shows details for an event, by event ID.\r\nSpecify the event ID in the eventId parameter in the URI.\r\n\r\nhttps://developer.ciscospark.com/endpoint-events-eventId-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get event details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get event details: success\"] = true;",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get event details: failed\"] = false;\n}\nelse {\n    tests[\"Get event details: success\"] = true;\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "8a44d5a8-ee10-eab7-2655-7c80cea68a7b",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/organizations",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "time": 1500540455376,
            "name": "List Organizations",
            "description": "List all organizations visible by your account.\n\nhttps://developer.ciscospark.com/endpoint-organizations-get.html\n\nExample Response:\n``` json\n{\n  'items' : [ {\n    'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n    'displayName' : 'Acme, Inc.',\n    'created' : '2015-10-18T14:26:16+00:00'\n  } ]\n}\n```",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "83590afe-95a9-68e6-de56-53c730353399",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List organizations : failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List organizations: success\"] = true;",
                            "    ",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.items === undefined) {",
                            "        tests[\"List organizations: cannot retreive result\"] = false",
                            "    }",
                            "    else {",
                            "        var orgId = jsonData.items[0].id;",
                            "        postman.setEnvironmentVariable(\"_organization\", orgId);",
                            "        tests[\"List organizations: retreived one with id:\" + orgId] = true",
                            "    }",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List organizations : failed\"] = false;\n}\nelse {\n    tests[\"List organizations: success\"] = true;\n    \n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.items === undefined) {\n        tests[\"List organizations: cannot retreive result\"] = false\n    }\n    else {\n        var orgId = jsonData.items[0].id;\n        postman.setEnvironmentVariable(\"_organization\", orgId);\n        tests[\"List organizations: retreived one with id:\" + orgId] = true\n    }\n}",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\n    \"name\": \"European Football Championship 2016\"\n}"
        },
        {
            "id": "8b6f952c-df94-6890-1f72-eb5304320d32",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/events?max=10",
            "queryParams": [
                {
                    "key": "max",
                    "value": "10",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": null,
            "dataMode": "params",
            "time": 1500538322399,
            "name": "List Events",
            "description": "List events in your organization. Several query parameters are available to filter the response.\nLong result sets will be split into pages.\n\nhttps://developer.ciscospark.com/endpoint-events-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List events: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List events: success\"] = true;",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List events: failed\"] = false;\n}\nelse {\n    tests[\"List events: success\"] = true;\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "90be273b-e03d-703e-4194-fdc14edb7cde",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/events?from={{_one_hour_ago}}&to={{_now}}",
            "folder": "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc",
            "queryParams": [
                {
                    "key": "from",
                    "value": "{{_one_hour_ago}}",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "to",
                    "value": "{{_now}}",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "var now = new Date(Date.now());",
                            "postman.setEnvironmentVariable(\"_now\", now.toISOString());",
                            "",
                            "var one_hour_ago = now;",
                            "one_hour_ago.setHours(one_hour_ago.getHours()-1);",
                            "postman.setEnvironmentVariable(\"_one_hour_ago\", one_hour_ago.toISOString());",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List events (last hour): failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List events (last hour): success\"] = true;",
                            "}"
                        ]
                    }
                }
            ],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": null,
            "dataMode": "params",
            "auth": null,
            "time": 1513929345416,
            "name": "List Events (last hour)",
            "description": "List events in your organization. Several query parameters are available to filter the response.\nLong result sets will be split into pages.\n\nhttps://developer.ciscospark.com/endpoint-events-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "preRequestScript": "var now = new Date(Date.now());\npostman.setEnvironmentVariable(\"_now\", now.toISOString());\n\nvar one_hour_ago = now;\none_hour_ago.setHours(one_hour_ago.getHours()-1);\npostman.setEnvironmentVariable(\"_one_hour_ago\", one_hour_ago.toISOString());\n\n\n\n\n\n",
            "tests": "if (responseCode.code != 200) {\n    tests[\"List events (last hour): failed\"] = false;\n}\nelse {\n    tests[\"List events (last hour): success\"] = true;\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "b16b78de-df0a-5d5b-5b56-387984581282",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people?email={{_email}}",
            "queryParams": [
                {
                    "key": "email",
                    "value": "{{_email}}",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": null,
            "dataMode": "params",
            "time": 1500539485222,
            "name": "List people (with exact email)",
            "description": "List people in your organization.\n\nhttps://developer.ciscospark.com/endpoint-people-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List people: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List people: success\"] = true;",
                            "}",
                            "",
                            ""
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List people: failed\"] = false;\n}\nelse {\n    tests[\"List people: success\"] = true;\n}\n\n",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "c3d6ff1e-be4c-e29e-6630-658f9a25baef",
            "headers": "Authorization: Bearer {{spark_token}}\nContent-Type: application/json\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people",
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "queryParams": [],
            "events": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "var random = Math.round(Math.random()*1000);",
                            "",
                            "postman.setEnvironmentVariable(\"_random\", random);"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Create a person: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Create a person: success\"] = true;",
                            "",
                            "    var jsonData = JSON.parse(responseBody);",
                            "    if (jsonData.id === undefined) {",
                            "        tests[\"Create a person: cannot retreive result\"] = false",
                            "    }",
                            "    else {",
                            "        var personID = jsonData.id;",
                            "        postman.setEnvironmentVariable(\"_person\", personID);",
                            "        tests[\"Create a person: retreived with id:\" + personID] = true",
                            "        ",
                            "        var orgId = jsonData.orgId;",
                            "        postman.setEnvironmentVariable(\"_organization\", orgId);",
                            "        tests[\"Create a person: retreived org with id:\" + orgId] = true",
                            "        ",
                            "        var email = jsonData.emails[0];",
                            "        postman.setEnvironmentVariable(\"_email\", email);",
                            "        tests[\"Create a person: retreived email:\" + email] = true",
                            "    }",
                            "    ",
                            "}",
                            "    ",
                            "    "
                        ]
                    }
                }
            ],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "POST",
            "data": [],
            "dataMode": "raw",
            "auth": null,
            "time": 1513929567970,
            "name": "Create a Person",
            "description": "Create a new user account for a given organization. Only an admin can create a new user account.\n\nhttps://developer.ciscospark.com/endpoint-people-post.html\n\nExample Request:\n``` json\n{\n  'emails' : [ 'johnny.chang@foomail.com', 'jchang@barmail.com' ],\n  'displayName' : 'John Andersen',\n  'firstName' : 'John',\n  'lastName' : 'Andersen',\n  'avatar' : 'https://1efa7a94ed21783e352-c62266528714497a17239ececf39e9e2.ssl.cf1.rackcdn.com/V1~54c844c89e678e5a7b16a306bc2897b9~wx29yGtlTpilEFlYzqPKag==~1600',\n  'orgId' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n  'roles' : [ 'Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy', 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX' ],\n  'licenses' : [ 'Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy', 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX' ]\n}\n\nExample Response:\n{\n  'id' : 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mNWIzNjE4Ny1jOGRkLTQ3MjctOGIyZi1mOWM0NDdmMjkwNDY',\n  'emails' : [ 'johnny.chang@foomail.com', 'jchang@barmail.com' ],\n  'displayName' : 'John Andersen',\n  'firstName' : 'John',\n  'lastName' : 'Andersen',\n  'avatar' : 'https://1efa7a94ed21783e352-c62266528714497a17239ececf39e9e2.ssl.cf1.rackcdn.com/V1~54c844c89e678e5a7b16a306bc2897b9~wx29yGtlTpilEFlYzqPKag==~1600',\n  'orgId' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\n  'roles' : [ 'Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy', 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX' ],\n  'licenses' : [ 'Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy', 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX' ],\n  'created' : '2015-10-18T14:26:16+00:00',\n  'timezone' : 'America/Denver'\n}\n```",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "preRequestScript": "var random = Math.round(Math.random()*1000);\n\npostman.setEnvironmentVariable(\"_random\", random);",
            "tests": "if (responseCode.code != 200) {\n    tests[\"Create a person: failed\"] = false;\n}\nelse {\n    tests[\"Create a person: success\"] = true;\n\n    var jsonData = JSON.parse(responseBody);\n    if (jsonData.id === undefined) {\n        tests[\"Create a person: cannot retreive result\"] = false\n    }\n    else {\n        var personID = jsonData.id;\n        postman.setEnvironmentVariable(\"_person\", personID);\n        tests[\"Create a person: retreived with id:\" + personID] = true\n        \n        var orgId = jsonData.orgId;\n        postman.setEnvironmentVariable(\"_organization\", orgId);\n        tests[\"Create a person: retreived org with id:\" + orgId] = true\n        \n        var email = jsonData.emails[0];\n        postman.setEnvironmentVariable(\"_email\", email);\n        tests[\"Create a person: retreived email:\" + email] = true\n    }\n    \n}\n    \n    ",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\r\n  \"emails\": [\r\n    \"{{_random}}@{{_domain}}\"\r\n  ],\r\n  \"firstName\": \"User\",\r\n  \"lastName\": \"FromPostman\"\r\n}"
        },
        {
            "id": "cefbbd82-629d-18e7-2bcf-d2c7b463ee3f",
            "headers": "Authorization: Bearer {{spark_token}}\nContent-Type: application/json\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people/{{_person}}",
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "PUT",
            "data": [],
            "dataMode": "raw",
            "time": 1508748178027,
            "name": "Update a Person",
            "description": "Update details for a person, by ID.\r\n\r\nSpecify the person ID in the personId parameter in the URI. Only an admin can update a person details.\r\n\r\nhttps://developer.ciscospark.com/endpoint-people-personId-put.html\r\n\r\nExample Request:\r\n``` json\r\n{\r\n  'emails\" : [ 'johnny.chang@foomail.com', 'jchang@barmail.com' ],\r\n  'displayName' : 'John Andersen',\r\n  'firstName' : 'John',\r\n  'lastName' : 'Andersen',\r\n  'avatar' : 'https://1efa7a94ed21783e352-c62266528714497a17239ececf39e9e2.ssl.cf1.rackcdn.com/V1~54c844c89e678e5a7b16a306bc2897b9~wx29yGtlTpilEFlYzqPKag==~1600',\r\n  'orgId' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\r\n  'roles' : [ 'Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy', 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX' ],\r\n  'licenses' : [ 'Y2lzY29zcGFyazovL3VzL1JPT00vOGNkYzQwYzQtZjA5ZS0zY2JhLThjMjYtZGQwZTcwYWRlY2Iy', 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9mMDZkNzFhNS0wODMzLTRmYTUtYTcyYS1jYzg5YjI1ZWVlMmX' ]\r\n}\r\n```",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Update person: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Update person: success\"] = true;",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Update person: failed\"] = false;\n}\nelse {\n    tests[\"Update person: success\"] = true;\n}",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\r\n  \"orgId\":\"{{_organization}}\",\r\n  \"emails\": [\r\n        \"{{_email}}\"\r\n    ],\r\n  \"displayName\": \"User updated\",\r\n  \"roles\": [\"{{_role}}\"]\r\n}\r\n\r\n\r\n  "
        },
        {
            "id": "d8027acf-e393-f5d4-c6c6-65b6efcc1628",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/organizations/{{_organization}}",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "time": 1500540459360,
            "name": "Get Organization Details",
            "description": "Shows details for an organization, by ID.\r\n\r\nSpecify the org ID in the orgId parameter in the URI.\r\n\r\nhttps://developer.ciscospark.com/endpoint-organizations-orgId-get.html\r\n\r\nExample Response:\r\n``` json\r\n{\r\n  'id' : 'OTZhYmMyYWEtM2RjYy0xMWU1LWExNTItZmUzNDgxOWNkYzlh',\r\n  'displayName' : 'Acme, Inc.',\r\n  'created' : '2015-10-18T14:26:16+00:00'\r\n}\r\n```",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "83590afe-95a9-68e6-de56-53c730353399",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get organization details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get organization details: success\"] = true;",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get organization details: failed\"] = false;\n}\nelse {\n    tests[\"Get organization details: success\"] = true;\n}",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{ \n    \"roomId\":\"Y2lzY29zcGFyazovL3VzL1JPT00vMjQ4ZTQ3OTAtZWJjZi0xMWU1LTkyMjEtMTVmMTZiMmJlZjUx\" , \n    \"name\":\"NewApp\",\n    \"redirectUrls\":[\"http://sfartz.com/hello\"],\n    \"scopes\":[\"spark:people_read\"]\n}"
        },
        {
            "id": "ef2d5da0-9e68-3cce-ea37-10758a6b315f",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/events?resource=messages&type=created",
            "queryParams": [
                {
                    "key": "resource",
                    "value": "messages",
                    "equals": true,
                    "description": "",
                    "enabled": true
                },
                {
                    "key": "type",
                    "value": "created",
                    "equals": true,
                    "description": "",
                    "enabled": true
                }
            ],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": null,
            "dataMode": "params",
            "time": 1500538170384,
            "name": "List Events (new messages)",
            "description": "List events in your organization. Several query parameters are available to filter the response.\nLong result sets will be split into pages.\n\nhttps://developer.ciscospark.com/endpoint-events-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "7c73fd0f-34bc-0715-6ce7-74679b4cfbbc",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"List events (new messages): failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"List events (new messages): success\"] = true;",
                            "}"
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"List events (new messages): failed\"] = false;\n}\nelse {\n    tests[\"List events (new messages): success\"] = true;\n}",
            "currentHelper": null,
            "helperAttributes": null
        },
        {
            "id": "ff88a8ea-7772-e534-952c-9488ec0e31a3",
            "headers": "Authorization: Bearer {{spark_token}}\n",
            "headerData": [
                {
                    "key": "Authorization",
                    "value": "Bearer {{spark_token}}",
                    "description": "",
                    "enabled": true
                }
            ],
            "url": "https://api.ciscospark.com/v1/people/{{_person}}",
            "queryParams": [],
            "pathVariables": [],
            "pathVariableData": [],
            "method": "GET",
            "data": [],
            "dataMode": "raw",
            "time": 1500539860542,
            "name": "Get Person Details",
            "description": "Shows details for a person, by ID.\nSpecify the person ID in the personId parameter in the URI.\n\nhttps://developer.ciscospark.com/endpoint-people-personId-get.html",
            "collectionId": "beba6b1c-a834-f8a3-951c-29678666d198",
            "responses": [],
            "folder": "35701845-4082-6e65-c017-3d53910f68a7",
            "auth": null,
            "events": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "if (responseCode.code != 200) {",
                            "    tests[\"Get person details: failed\"] = false;",
                            "}",
                            "else {",
                            "    tests[\"Get person details: success\"] = true;",
                            "}",
                            "",
                            "",
                            "    "
                        ]
                    }
                }
            ],
            "preRequestScript": null,
            "tests": "if (responseCode.code != 200) {\n    tests[\"Get person details: failed\"] = false;\n}\nelse {\n    tests[\"Get person details: success\"] = true;\n}\n\n\n    ",
            "currentHelper": null,
            "helperAttributes": null,
            "rawModeData": "{\n  \"emails\": [\n    \"steve.sfartz@gmail.com\"\n  ],\n  \"displayName\": \"Steve Sfartz\",\n  \"firstName\": \"Steve\",\n  \"lastName\": \"Sfartz\",\n  \"orgId\": \"Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi82NWQ0N2MzNS1lNzg1LTRjZTMtOWM0NC1hNGM0OGViZTQyYmE\"\n  \n}"
        }
    ]
}