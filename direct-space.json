{
	"info": {
		"_postman_id": "c8e5a5a8-b350-46ef-a26c-bea137710805",
		"name": "Cisco Spark API - Direct Rooms",
		"description": "create the 1-1 room between you and a fake Spark user (\"dummy\"), unless the _dummy env variable is set to a Spark account of your preference.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create a 1-1 room",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var searchingFor = postman.getEnvironmentVariable(\"_dummy\");",
							"if (searchingFor === undefined) {",
							"    postman.setEnvironmentVariable(\"_dummy\", \"dummy@sparkbot.io\");",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200) {",
							"    tests[\"Create 1-1 room: failed\"] = false",
							"}",
							"else {",
							"    tests[\"Create 1-1 room: room created\"] = true",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"    if (jsonData.id === undefined) {",
							"        tests[\"Create 1-1 room: cannot retreive message info\"] = false",
							"    }",
							"    else {",
							"    ",
							"        var roomId = jsonData.roomId;",
							"        postman.setEnvironmentVariable(\"_room\", roomId);",
							"        var messageId = jsonData.id;",
							"        postman.setEnvironmentVariable(\"_message\", messageId);",
							"        var personId = jsonData.personId;",
							"        postman.setEnvironmentVariable(\"_person\", personId);",
							"",
							"        tests[\"Create 1-1 room: message created to person id:\" + personId] = true",
							"    }",
							"}",
							"    ",
							"    ",
							"    ",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{spark_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"toPersonEmail\" : \"{{_dummy}}\",\r\n  \"text\" : \"This message is sent to a person directly => will create a 1-1 room, and make you rejoin a pre-existing 1-1 room you've chosen to leave\"\r\n}"
				},
				"url": {
					"raw": "https://api.ciscospark.com/v1/messages",
					"protocol": "https",
					"host": [
						"api",
						"ciscospark",
						"com"
					],
					"path": [
						"v1",
						"messages"
					]
				},
				"description": "To create a 1-1 room, we post a message to a person Cisco Spark 's email.\n\nhttps://developer.ciscospark.com/endpoint-messages-post.html"
			},
			"response": []
		},
		{
			"name": "List messages (in 1-1 room)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200) {",
							"    tests[\"List messages: failed\"] = false;",
							"}",
							"else {",
							"    tests[\"List messages: success\"] = true;",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{spark_token}}"
					}
				],
				"url": {
					"raw": "https://api.ciscospark.com/v1/messages?roomId={{_room}}",
					"protocol": "https",
					"host": [
						"api",
						"ciscospark",
						"com"
					],
					"path": [
						"v1",
						"messages"
					],
					"query": [
						{
							"key": "roomId",
							"value": "{{_room}}"
						}
					]
				},
				"description": "learning purpose only here: help understand what's happening on the Spark back-end."
			},
			"response": []
		},
		{
			"name": "List memberships (for 1-1 room)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200) {",
							"    tests[\"List rooms: failed\"] = false;",
							"}",
							"else {",
							"    tests[\"List rooms: success\"] = true;",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{spark_token}}"
					}
				],
				"url": {
					"raw": "https://api.ciscospark.com/v1/memberships?roomId={{_room}}",
					"protocol": "https",
					"host": [
						"api",
						"ciscospark",
						"com"
					],
					"path": [
						"v1",
						"memberships"
					],
					"query": [
						{
							"key": "roomId",
							"value": "{{_room}}"
						}
					]
				},
				"description": "learning purpose only here: help understand what's happening on the Spark back-end."
			},
			"response": []
		},
		{
			"name": "Delete a room (fails with 409)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 409) {",
							"    tests[\"Delete a room: failed\"] = false",
							"}",
							"else {",
							"    tests[\"Delete a room: success\"] = true",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{spark_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.ciscospark.com/v1/rooms/{{_room}}",
					"protocol": "https",
					"host": [
						"api",
						"ciscospark",
						"com"
					],
					"path": [
						"v1",
						"rooms",
						"{{_room}}"
					]
				},
				"description": "As documented, this call will fails, as a 1-1 room cannot be removed."
			},
			"response": []
		},
		{
			"name": "Extract membership",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200) {",
							"    tests[\"Extract membership: failed\"] = false;",
							"}",
							"else {",
							"    ",
							"    var jsonData = JSON.parse(responseBody);",
							"    if (jsonData.items === undefined) {",
							"        tests[\"Extract membership: cannot retreive memberships\"] = false",
							"    }",
							"    else {",
							"        ",
							"        var members = jsonData.items;",
							"        var searchingFor = postman.getEnvironmentVariable(\"_person\");",
							"        var found = \"\";",
							"        for (i = 0; i < members.length; i++) {",
							"            var member = members[i];",
							"            if (member.personId === searchingFor) {",
							"                found = member.id;",
							"            }",
							"        }",
							"    ",
							"        postman.setEnvironmentVariable(\"_membership\", found);",
							"",
							"        tests[\"Extract membership: found:\" + found] = true",
							"    }",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{spark_token}}"
					}
				],
				"url": {
					"raw": "https://api.ciscospark.com/v1/memberships?roomId={{_room}}",
					"protocol": "https",
					"host": [
						"api",
						"ciscospark",
						"com"
					],
					"path": [
						"v1",
						"memberships"
					],
					"query": [
						{
							"key": "roomId",
							"value": "{{_room}}"
						}
					]
				},
				"description": "List 1-1 memberships, and extracts your membership identifier"
			},
			"response": []
		},
		{
			"name": "Delete membership (fails with 409)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 204) {",
							"    tests[\"Delete a membership: failed\"] = false",
							"}",
							"else {",
							"    tests[\"Delete a membership: success\"] = true",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{spark_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.ciscospark.com/v1/memberships/{{_membership}}",
					"protocol": "https",
					"host": [
						"api",
						"ciscospark",
						"com"
					],
					"path": [
						"v1",
						"memberships",
						"{{_membership}}"
					]
				},
				"description": "Leaves the room we joined in the first call when we sent the direct message.\r\n\r\nThis Fails with 409 as the Spark API does not support this feature for now.\r\n\r\nLeaving a room is only possible via the Spark clients."
			},
			"response": []
		}
	]
}